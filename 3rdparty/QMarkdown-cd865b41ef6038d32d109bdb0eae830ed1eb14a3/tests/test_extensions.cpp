#include "test_extensions.h"

#include <QDebug>
#include <QTest>

#include "extensions/admonition.h"

#include "extensions/abbr.h"
#include "extensions/attr_list.h"
#include "extensions/def_list.h"
#include "extensions/tables.h"

TestExtensions::TestExtensions()
{

}

TestExtensions::~TestExtensions()
{

}

void TestExtensions::initTestCase()
{

}

void TestExtensions::cleanupTestCase()
{

}

void TestExtensions::init()
{

}

void TestExtensions::cleanup()
{

}

void TestExtensions::admonition()
{
    std::shared_ptr<markdown::Markdown> md = markdown::create_Markdown({
        markdown::AdmonitionExtension::generate(),
    });

    QString converted = md->convert(
                "Some text" "\n"
                "" "\n"
                "!!! note" "\n"
                "    A normal paragraph here" "\n"
                "" "\n"
                "    1. first" "\n"
                "    2. second" "\n"
                "" "\n"
                "    > Some important quote" "\n"
                "" "\n"
                "    > another paragraph in the quote" "\n"
                "" "\n"
                "        int main() {" "\n"
                "            // insert some code" "\n"
                "        }" "\n"
                "" "\n"
                "More text and stuff." "\n"
                "" "\n"
                R"(!!! Note "Did you know?")" "\n"
                "    You can customize the title of the admonition" "\n"
                "Not part of an Admonition!" "\n"
                "" "\n"
                R"(!!! mycustomcssclass "And now...")" "\n"
                "    For something completely different." "\n"
                "" "\n"
                "    You can also use a custom CSS class name." "\n"
                "" "\n"
                R"(!!! tip "")" "\n"
                "    An explicitly empty string prevents the title from being rendered." "\n"
                "");
    QCOMPARE(converted,
             QString("<p>Some text</p>" "\n"
                     R"(<div class="admonition note">)" "\n"
                     R"(<p class="admonition-title">Note</p>)" "\n"
                     "<p>A normal paragraph here</p>" "\n"
                     "<ol>" "\n"
                     "<li>first</li>" "\n"
                     "<li>second</li>" "\n"
                     "</ol>" "\n"
                     "<blockquote>" "\n"
                     "<p>Some important quote</p>" "\n"
                     "<p>another paragraph in the quote</p>" "\n"
                     "</blockquote>" "\n"
                     "<pre><code>int main() {" "\n"
                     "    // insert some code" "\n"
                     "}" "\n"
                     "</code></pre>" "\n"
                     "</div>" "\n"
                     "<p>More text and stuff.</p>" "\n"
                     R"(<div class="admonition note">)" "\n"
                     R"(<p class="admonition-title">Did you know?</p>)" "\n"
                     "<p>You can customize the title of the admonition</p>" "\n"
                     "</div>" "\n"
                     "<p>Not part of an Admonition!</p>" "\n"
                     R"(<div class="admonition mycustomcssclass">)" "\n"
                     R"(<p class="admonition-title">And now...</p>)" "\n"
                     "<p>For something completely different.</p>" "\n"
                     "<p>You can also use a custom CSS class name.</p>" "\n"
                     "</div>" "\n"
                     R"(<div class="admonition tip">)" "\n"
                     "<p>An explicitly empty string prevents the title from being rendered.</p>" "\n"
                     "</div>"));
}

void TestExtensions::attr_list()
{
    std::shared_ptr<markdown::Markdown> md = markdown::create_Markdown({
        markdown::AttrListExtension::generate(),
        markdown::DefListExtension::generate(),
    });

    QString converted = md->convert(
                "This is a sextext header {: #setext}" "\n"
                "====================================" "\n"
                "" "\n"
                "A paragraph with some text." "\n"
                "Line two of the paragraph." "\n"
                "{: #par1 .myclass }" "\n"
                "" "\n"
                "This is another {: #sextext2 .someclass}" "\n"
                "----------------------------------------" "\n"
                "" "\n"
                "Test some _inline_{: .inline} text." "\n"
                R"(A [link](http://example.com){: .linkkyclass title="A title."})" "\n"
                "And a __nested [link][]{: .linky2}__{: .nest}" "\n"
                "" "\n"
                R"([link]: http://example.com "Some title")" "\n"
                "" "\n"
                "### This is a hash Header ### {: #hash}" "\n"
                "" "\n"
                "And now some random attributes." "\n"
                R"({:foo bar='b az' baz="blah blah" title="I wasn't kidding!" })" "\n"
                "" "\n"
                "### No closing hash header {: #hash2}" "\n"
                "" "\n"
                "Now test overrides" "\n"
                "{: #overrideme .andme id=overridden class='foo bar' .addme }" "\n"
                "" "\n"
                "    # A code block which contains attr_list syntax" "\n"
                "    # This should be ignored." "\n"
                "    {: #someid .someclass }" "\n"
                "" "\n"
                "### No colon for compatability with Headerid ext { #hash3 }" "\n"
                "" "\n"
                "Also a codespan: `{: .someclass}`{: .foo}." "\n"
                "{: #the_end}" "\n"
                "" "\n"
                "### Bad Syntax { {: #hash5 }" "\n"
                "" "\n"
                "* Item1" "\n"
                "  {: .item }" "\n"
                "* Item2" "\n"
                "  {: .item }" "\n"
                "    * Item2-1" "\n"
                "      {: .subitem }" "\n"
                "* _Item3_{: .emph }" "\n"
                "  {: .item }" "\n"
                "    * _Item3-1_{: .emph }" "\n"
                "      {: .subitem }" "\n"
                "* Item4" "\n"
                "    * Item4-1" "\n"
                "* Item5" "\n"
                "" "\n"
                "# And ordered lists *too*{.inline}" "\n"
                "" "\n"
                "1. Item1" "\n"
                "   {: .item }" "\n"
                "2. Item2" "\n"
                "   {: .item }" "\n"
                "    1. Item2-1" "\n"
                "       {: .subitem }" "\n"
                "3. _Item3_{: .emph }" "\n"
                "   {: .item }" "\n"
                "    1. _Item3-1_{: .emph }" "\n"
                "       {: .subitem }" "\n"
                "4. Item4" "\n"
                "    1. Item4-1" "\n"
                "5. Item5" "\n"
                "" "\n"
                "# Definition *lists* {.block}" "\n"
                "" "\n"
                "DT1 {.term}" "\n"
                "DT2 {.term}" "\n"
                ":   Some dd" "\n"
                "    {.def}" "\n"
                ":   *dd*{.inline}" "\n"
                "" "\n"
                "*DT3*{.inline}" "\n"
                ":   Some dd" "\n"
                "" "\n"
                "# Bad attributes" "\n"
                "" "\n"
                "Key without *value*{ foo= }" "\n"
                "" "\n"
                "Value without *key*{ =bar }" "\n"
                "" "\n"
                "No *key or value*{ = }" "\n"
                "" "\n"
                "*Weirdness*{ == }" "\n"
                "" "\n"
                "*More weirdness*{ === }" "\n"
                "" "\n"
                "");
    QCOMPARE(converted,
             QString(R"(<h1 id="setext">This is a sextext header</h1>)" "\n"
                     R"(<p class="myclass" id="par1">A paragraph with some text.)" "\n"
                     "Line two of the paragraph.</p>" "\n"
                     R"(<h2 class="someclass" id="sextext2">This is another</h2>)" "\n"
                     R"(<p>Test some <em class="inline">inline</em> text.)" "\n"
                     R"(A <a class="linkkyclass" href="http://example.com" title="A title.">link</a>)" "\n"
                     R"(And a <strong class="nest">nested <a class="linky2" href="http://example.com" title="Some title">link</a></strong></p>)" "\n"
                     R"(<h3 id="hash">This is a hash Header</h3>)" "\n"
                     R"(<p bar="b az" baz="blah blah" foo="foo" title="I wasn't kidding!">And now some random attributes.</p>)" "\n"
                     R"(<h3 id="hash2">No closing hash header</h3>)" "\n"
                     R"(<p class="foo bar addme" id="overridden">Now test overrides</p>)" "\n"
                     "<pre><code># A code block which contains attr_list syntax" "\n"
                     "# This should be ignored." "\n"
                     "{: #someid .someclass }" "\n"
                     "</code></pre>" "\n"
                     R"(<h3 id="hash3">No colon for compatability with Headerid ext</h3>)" "\n"
                     R"(<p id="the_end">Also a codespan: <code class="foo">{: .someclass}</code>.</p>)" "\n"
                     R"(<h3 _:="{:" id="hash5">Bad Syntax</h3>)" "\n"
                     "<ul>" "\n"
                     R"(<li class="item">Item1</li>)" "\n"
                     R"(<li class="item">Item2<ul>)" "\n"
                     R"(<li class="subitem">Item2-1</li>)" "\n"
                     "</ul>" "\n"
                     "</li>" "\n"
                     R"(<li class="item"><em class="emph">Item3</em><ul>)" "\n"
                     R"(<li class="subitem"><em class="emph">Item3-1</em></li>)" "\n"
                     "</ul>" "\n"
                     "</li>" "\n"
                     "<li>Item4<ul>" "\n"
                     "<li>Item4-1</li>" "\n"
                     "</ul>" "\n"
                     "</li>" "\n"
                     "<li>Item5</li>" "\n"
                     "</ul>" "\n"
                     R"(<h1>And ordered lists <em class="inline">too</em></h1>)" "\n"
                     "<ol>" "\n"
                     R"(<li class="item">Item1</li>)" "\n"
                     R"(<li class="item">Item2<ol>)" "\n"
                     R"(<li class="subitem">Item2-1</li>)" "\n"
                     "</ol>" "\n"
                     "</li>" "\n"
                     R"(<li class="item"><em class="emph">Item3</em><ol>)" "\n"
                     R"(<li class="subitem"><em class="emph">Item3-1</em></li>)" "\n"
                     "</ol>" "\n"
                     "</li>" "\n"
                     "<li>Item4<ol>" "\n"
                     "<li>Item4-1</li>" "\n"
                     "</ol>" "\n"
                     "</li>" "\n"
                     "<li>Item5</li>" "\n"
                     "</ol>" "\n"
                     R"(<h1 class="block">Definition <em>lists</em></h1>)" "\n"
                     "<dl>" "\n"
                     R"(<dt class="term">DT1</dt>)" "\n"
                     R"(<dt class="term">DT2</dt>)" "\n"
                     R"(<dd class="def">Some dd</dd>)" "\n"
                     R"(<dd><em class="inline">dd</em></dd>)" "\n"
                     R"(<dt><em class="inline">DT3</em></dt>)" "\n"
                     "<dd>Some dd</dd>" "\n"
                     "</dl>" "\n"
                     "<h1>Bad attributes</h1>" "\n"
                     R"(<p>Key without <em foo="foo">value</em></p>)" "\n"
                     "<p>Value without <em>key</em></p>" "\n"
                     "<p>No <em>key or value</em></p>" "\n"
                     "<p><em>Weirdness</em></p>" "\n"
                     "<p><em>More weirdness</em></p>"));
}

void TestExtensions::abbr()
{
    std::shared_ptr<markdown::Markdown> md = markdown::create_Markdown({
        markdown::AbbrExtension::generate(),
    });

    QString converted = md->convert(
                R"(An ABBR: "REF".)" "\n"
                "ref and REFERENCE should be ignored." "\n"
                "" "\n"
                "*[REF]: Reference" "\n"
                "*[ABBR]: This gets overriden by the next one." "\n"
                "*[ABBR]: Abbreviation" "\n"
                "" "\n"
                "The HTML specification" "\n"
                "is maintained by the W3C." "\n"
                "" "\n"
                "*[HTML]: Hyper Text Markup Language" "\n"
                "*[W3C]:  World Wide Web Consortium" "\n"
                "" "\n"
                "");
    QCOMPARE(converted,
             QString(R"(<p>An <abbr title="Abbreviation">ABBR</abbr>: "<abbr title="Reference">REF</abbr>".)" "\n"
                     "ref and REFERENCE should be ignored.</p>" "\n"
                     R"(<p>The <abbr title="Hyper Text Markup Language">HTML</abbr> specification)" "\n"
                     R"(is maintained by the <abbr title="World Wide Web Consortium">W3C</abbr>.</p>)"));
}

void TestExtensions::def_in_list()
{
    std::shared_ptr<markdown::Markdown> md = markdown::create_Markdown({
        markdown::DefListExtension::generate(),
    });

    QString converted = md->convert(
                ": a paragraph that starts with a colon" "\n"
                "" "\n"
                "* A List item" "\n"
                "* " "\n"
                "    A def term" "\n"
                "    : A def item" "\n"
                "    : a second" "\n"
                "" "\n"
                "* Another def term" "\n"
                "" "\n"
                "    : a loose item" "\n"
                "    " "\n"
                "    : a second" "\n"
                "" "\n"
                "* : a list item that starts with a colon" "\n"
                "");
    QCOMPARE(converted,
             QString("<p>: a paragraph that starts with a colon</p>" "\n"
                     "<ul>" "\n"
                     "<li>A List item</li>" "\n"
                     "<li>" "\n"
                     "<dl>" "\n"
                     "<dt>A def term</dt>" "\n"
                     "<dd>A def item</dd>" "\n"
                     "<dd>a second</dd>" "\n"
                     "</dl>" "\n"
                     "</li>" "\n"
                     "<li>" "\n"
                     "<dl>" "\n"
                     "<dt>Another def term</dt>" "\n"
                     "<dd>" "\n"
                     "<p>a loose item</p>" "\n"
                     "</dd>" "\n"
                     "<dd>" "\n"
                     "<p>a second</p>" "\n"
                     "</dd>" "\n"
                     "</dl>" "\n"
                     "</li>" "\n"
                     "<li>" "\n"
                     "<p>: a list item that starts with a colon</p>" "\n"
                     "</li>" "\n"
                     "</ul>"));
}

void TestExtensions::tables()
{
    std::shared_ptr<markdown::Markdown> md = markdown::create_Markdown({
        markdown::TableExtension::generate(),
    });

    QString converted = md->convert(
                "Table Tests" "\n"
                "-----------" "\n"
                "" "\n"
                "First Header  | Second Header" "\n"
                "------------- | -------------" "\n"
                "Content Cell  | Content Cell" "\n"
                "Content Cell  | Content Cell" "\n"
                "" "\n"
                "| First Header  | Second Header |" "\n"
                "| ------------- | ------------- |" "\n"
                "| Content Cell  | Content Cell  |" "\n"
                "| Content Cell  | Content Cell  |" "\n"
                "" "\n"
                "| Item      | Value |" "\n"
                "| :-------- | -----:|" "\n"
                "| Computer  | $1600 |" "\n"
                "| Phone     |   $12 |" "\n"
                "| Pipe      |    $1 |" "\n"
                "" "\n"
                "| Function name | Description                    |" "\n"
                "| ------------- | ------------------------------ |" "\n"
                "| `help()`      | Display the help window.       |" "\n"
                "| `destroy()`   | **Destroy your computer!**     |" "\n"
                "" "\n"
                "|foo|bar|baz|" "\n"
                "|:--|:-:|--:|" "\n"
                "|   | Q |   |" "\n"
                "|W  |   |  W|" "\n"
                "" "\n"
                "foo|bar|baz" "\n"
                "---|---|---" "\n"
                "   | Q |" "\n"
                " W |   | W" "\n"
                "" "\n"
                "Three spaces in front of a table:" "\n"
                "" "\n"
                "   First Header | Second Header" "\n"
                "   ------------ | -------------" "\n"
                "   Content Cell | Content Cell" "\n"
                "   Content Cell | Content Cell" "\n"
                "" "\n"
                "   | First Header | Second Header |" "\n"
                "   | ------------ | ------------- |" "\n"
                "   | Content Cell | Content Cell  |" "\n"
                "   | Content Cell | Content Cell  |" "\n"
                "" "\n"
                "Four spaces is a code block:" "\n"
                "   " "\n"
                "    First Header | Second Header" "\n"
                "    ------------ | -------------" "\n"
                "    Content Cell | Content Cell" "\n"
                "    Content Cell | Content Cell" "\n"
                "" "\n"
                "| First Header | Second Header |" "\n"
                "| ------------ | ------------- |" "\n"
                "" "\n"
                "More inline code block tests" "\n"
                "" "\n"
                "Column 1 | Column 2 | Column 3" "\n"
                "---------|----------|---------" "\n"
                "word 1   | word 2   | word 3" "\n"
                "word 1   | `word 2` | word 3" "\n"
                R"(word 1   | \`word 2 | word 3)" "\n"
                "word 1   | `word 2 | word 3" "\n"
                "word 1   | `word |2` | word 3" "\n"
                "words    |`` some | code `` | more words" "\n"
                "words    |``` some | code ``` | more words" "\n"
                "words    |```` some | code ```` | more words" "\n"
                "words    |`` some ` | ` code `` | more words" "\n"
                "words    |``` some ` | ` code ``` | more words" "\n"
                "words    |```` some ` | ` code ```` | more words" "\n"
                "" "\n"
                "A test for issue #440:" "\n"
                "" "\n"
                "foo | bar" "\n"
                "--- | ---" "\n"
                "foo | (`bar`) and `baz`.");
    QCOMPARE(converted,
             QString("<h2>Table Tests</h2>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>First Header</th>" "\n"
                     "<th>Second Header</th>" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>First Header</th>" "\n"
                     "<th>Second Header</th>" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>Item</th>" "\n"
                     R"(<th align="right">Value</th>)" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     "<td>Computer</td>" "\n"
                     R"(<td align="right">$1600</td>)" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>Phone</td>" "\n"
                     R"(<td align="right">$12</td>)" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>Pipe</td>" "\n"
                     R"(<td align="right">$1</td>)" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>Function name</th>" "\n"
                     "<th>Description</th>" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     "<td><code>help()</code></td>" "\n"
                     "<td>Display the help window.</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td><code>destroy()</code></td>" "\n"
                     "<td><strong>Destroy your computer!</strong></td>" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     R"(<th align="left">foo</th>)" "\n"
                     R"(<th align="center">bar</th>)" "\n"
                     R"(<th align="right">baz</th>)" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     R"(<td align="left"></td>)" "\n"
                     R"(<td align="center">Q</td>)" "\n"
                     R"(<td align="right"></td>)" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     R"(<td align="left">W</td>)" "\n"
                     R"(<td align="center"></td>)" "\n"
                     R"(<td align="right">W</td>)" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>foo</th>" "\n"
                     "<th>bar</th>" "\n"
                     "<th>baz</th>" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     "<td></td>" "\n"
                     "<td>Q</td>" "\n"
                     "<td></td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>W</td>" "\n"
                     "<td></td>" "\n"
                     "<td>W</td>" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>" "\n"
                     "<p>Three spaces in front of a table:</p>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>First Header</th>" "\n"
                     "<th>Second Header</th>" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>First Header</th>" "\n"
                     "<th>Second Header</th>" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "<td>Content Cell</td>" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>" "\n"
                     "<p>Four spaces is a code block:</p>" "\n"
                     "<pre><code>First Header | Second Header" "\n"
                     "------------ | -------------" "\n"
                     "Content Cell | Content Cell" "\n"
                     "Content Cell | Content Cell" "\n"
                     "</code></pre>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>First Header</th>" "\n"
                     "<th>Second Header</th>" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody></tbody>" "\n"
                     "</table>" "\n"
                     "<p>More inline code block tests</p>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>Column 1</th>" "\n"
                     "<th>Column 2</th>" "\n"
                     "<th>Column 3</th>" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     "<td>word 1</td>" "\n"
                     "<td>word 2</td>" "\n"
                     "<td>word 3</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>word 1</td>" "\n"
                     "<td><code>word 2</code></td>" "\n"
                     "<td>word 3</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>word 1</td>" "\n"
                     "<td>`word 2</td>" "\n"
                     "<td>word 3</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>word 1</td>" "\n"
                     "<td>`word 2</td>" "\n"
                     "<td>word 3</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>word 1</td>" "\n"
                     "<td><code>word |2</code></td>" "\n"
                     "<td>word 3</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>words</td>" "\n"
                     "<td><code>some | code</code></td>" "\n"
                     "<td>more words</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>words</td>" "\n"
                     "<td><code>some | code</code></td>" "\n"
                     "<td>more words</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>words</td>" "\n"
                     "<td><code>some | code</code></td>" "\n"
                     "<td>more words</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>words</td>" "\n"
                     "<td><code>some ` | ` code</code></td>" "\n"
                     "<td>more words</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>words</td>" "\n"
                     "<td><code>some ` | ` code</code></td>" "\n"
                     "<td>more words</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>words</td>" "\n"
                     "<td><code>some ` | ` code</code></td>" "\n"
                     "<td>more words</td>" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>" "\n"
                     "<p>A test for issue #440:</p>" "\n"
                     "<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>foo</th>" "\n"
                     "<th>bar</th>" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     "<td>foo</td>" "\n"
                     "<td>(<code>bar</code>) and <code>baz</code>.</td>" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>"));
}

void TestExtensions::tables_and_attr_list()
{
    std::shared_ptr<markdown::Markdown> md = markdown::create_Markdown({
        markdown::TableExtension::generate(),
        markdown::AttrListExtension::generate(),
    });

    QString converted = md->convert(
                "First Header                                           | Second Header" "\n"
                "------------------------------------------------------ | -------------" "\n"
                R"(Content Cell{: class="foo bar" title="Some title!" }   | Content Cell)" "\n"
                R"(Content Cell                                           | Content Cell{: class="foo bar" title="Some title!" })" "\n"
                "");
    QCOMPARE(converted,
             QString("<table>" "\n"
                     "<thead>" "\n"
                     "<tr>" "\n"
                     "<th>First Header</th>" "\n"
                     "<th>Second Header</th>" "\n"
                     "</tr>" "\n"
                     "</thead>" "\n"
                     "<tbody>" "\n"
                     "<tr>" "\n"
                     R"(<td class="foo bar" title="Some title!">Content Cell</td>)" "\n"
                     "<td>Content Cell</td>" "\n"
                     "</tr>" "\n"
                     "<tr>" "\n"
                     "<td>Content Cell</td>" "\n"
                     R"(<td class="foo bar" title="Some title!">Content Cell</td>)" "\n"
                     "</tr>" "\n"
                     "</tbody>" "\n"
                     "</table>"));
}

